rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a registered user
    function isRegisteredUser() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['user']);
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // Helper function to check if anonymous user
    function isAnonymousUser() {
      return request.auth != null && resource.data.status == 'community_review';
    }

    // Allow unauthenticated access in emulator mode
    function isEmulator() {
      return request.auth == null && request.time != null;
    }

    // Helper function to check if this is only a like update
    function isLikeUpdate(newData, oldData) {
      // Allow updates that only change likesCount and likedBy fields
      return newData.diff(oldData).affectedKeys().hasOnly(['likesCount', 'likedBy', 'updatedAt']) &&
             newData.keys().hasAll(oldData.keys());
    }

    // Allow public read access to approved words, community review for authenticated users, admin access to all words
    // Allow like updates for all users (authenticated and anonymous)
    match /words/{wordId} {
      allow read: if  isRegisteredUser() || 
                      isAdmin() || 
                      isEmulator() ||
                      resource.data.status == 'approved';
      allow write: if isRegisteredUser() ||
                    isAdmin() ||
                    isEmulator();
      // Allow specific like-related updates for anonymous users
      allow update: if isLikeUpdate(request.resource.data, resource.data);
    }
    
    // Allow admin access to all reports, users can only read their own reports
    match /reports/{reportId} {
      allow read: if isAdmin() || (request.auth != null && resource.data.user_id == request.auth.uid);
      allow write: if request.auth != null;
    }
    
    // Restrict user data access to authenticated users and admins
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /corrections/{wordId} {
      allow write: if isRegisteredUser() ||
                    isAdmin() ||
                    isEmulator();
      allow read: if isRegisteredUser() ||
                    isAdmin() ||
                    isEmulator();
    }
  }
}
